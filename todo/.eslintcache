[{"/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/index.js":"1","/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/App.js":"2","/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/reportWebVitals.js":"3","/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/Reducers/todoReducer.js":"4","/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/Components/TodoList.js":"5","/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/actions/actions.js":"6","/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/Components/todoForm.js":"7"},{"size":500,"mtime":1610993292138,"results":"8","hashOfConfig":"9"},{"size":243,"mtime":1611007887180,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610993292142,"results":"11","hashOfConfig":"9"},{"size":2252,"mtime":1611107059045,"results":"12","hashOfConfig":"9"},{"size":1304,"mtime":1611107059020,"results":"13","hashOfConfig":"9"},{"size":314,"mtime":1611001537951,"results":"14","hashOfConfig":"9"},{"size":706,"mtime":1611075293762,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"oksusb",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/index.js",[],["34","35"],"/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/App.js",[],"/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/reportWebVitals.js",[],"/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/Reducers/todoReducer.js",["36","37"],"import React, { useReducer } from 'react';\n// import { ADD_TODO, REMOVE_TODO } from '../actions/actions';\n\nconst ADD_TODO = 'ADD_TODO';\nconst REMOVE_TODO = 'REMOVE_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO'\n\nexport const addTodo = taskName => {\n    return{\n        type:ADD_TODO,\n        payload: taskName\n    };\n}\n\nexport const removeTodo = (taskName) => {\n    return{type:REMOVE_TODO, payload:taskName};\n}\n\nexport const toggleTodo = (data) => {\n    console.log('action', data);\n    return { type: TOGGLE_TODO, payload: data }\n}\n\nexport const initialState = {\n    todo: [\n        {\n        task: 'Learn about reducers...',\n        completed: false,\n        id: 3892987589\n        },\n        {\n        task: 'Whatever',\n        completed: false,\n        id: 3892987588\n        }\n    ]\n}\n\nconst nextTodoId = (todos) => {\n    const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n    return maxId + 1;\n}\n\n  function reducer(state = initialState, action) {\n    switch (action.type) {\n      case ADD_TODO:\n        return {\n            ...state,\n            todo: [\n                ...state.todo,\n                {\n                    task: action.payload,\n                    completed: false,\n                    id: nextTodoId(state.todo)\n                }\n            ]\n        }\n      case TOGGLE_TODO:\n          return {\n              ...state, \n              todo: state.todo.map((task) => {\n                  if (task.id === action.payload) {\n                      return {\n                          ...task,\n                          completed: !task.completed,\n                      };\n                  } else return task;\n              })\n          }\n      default:\n        return state\n    }\n  }\n\n//   reducer(initialState, { type: 'add' });\n//   reducer(initialState, { type: 'remove' });   \n\n  export default reducer;\n\n\n  // Actions 'describe' to our reducer function what event just took place and tell the reducer how to update state based on that event or 'action'\n\n  //Actions must be objects, and they must have a type property. Alos they can have a payload property as well. ","/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/Components/TodoList.js",[],"/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/actions/actions.js",["38"],"export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\n\nconst addTodo = (taskName) => {\n    return({type:ADD_TODO, payload:taskName});\n}\n\nconst removeTodo = (taskName) => {\n    return({type:REMOVE_TODO, payload:taskName});\n}\n\nexport default {\n    addTodo:addTodo,\n    removeTodo:removeTodo\n}",["39","40"],"/Users/Galvin/coding/unit-3/sprint-2/reducer-todo/todo/src/Components/todoForm.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":1,"column":8,"nodeType":"47","messageId":"48","endLine":1,"endColumn":13},{"ruleId":"45","severity":1,"message":"49","line":1,"column":17,"nodeType":"47","messageId":"48","endLine":1,"endColumn":27},{"ruleId":"50","severity":1,"message":"51","line":12,"column":1,"nodeType":"52","endLine":15,"endColumn":2},{"ruleId":"41","replacedBy":"53"},{"ruleId":"43","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["55"],["56"],"no-global-assign","no-unsafe-negation"]